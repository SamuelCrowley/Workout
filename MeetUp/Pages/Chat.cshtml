@page
@using MeetUp.Views
@using Microsoft.AspNetCore.Antiforgery
@inject IAntiforgery antiforgery
@model ChatModel
@{
    ViewData["Title"] = "Chat";
}

<div class="container-fluid">
    <input type="hidden" id="__RequestVerificationToken"
           name="__RequestVerificationToken"
           value="@antiforgery.GetAndStoreTokens(HttpContext).RequestToken">

    <div class="row">
        <div class="col-md-6 p-3">
            <h2>Chat Room</h2>
            <ul id="messagesList" class="list-group" style="height: 70vh; overflow-y: auto;"></ul>

            <div class="input-group mb-3">
                <input id="messageInput" type="text" class="form-control" placeholder="Type a message" />
                <div class="input-group-append">
                    <button class="btn btn-primary" onclick="sendMessage()">Send</button>
                </div>
            </div>
        </div>

        <div class="col-md-6 p-0">
            <h2>Gym Tracker</h2>
            <div class="card m-3 shadow-sm">
                <div class="card-body text-center">
                    <h4 class="card-title">Ready to work out?</h4>
                    <p class="card-text">Track your progress by starting a workout session.</p>
                    <button class="btn btn-success btn-lg" id="startWorkoutBtn" style="display: none;">
                        <i class="bi bi-play-circle"></i> Start Workout
                    </button>
                    <button class="btn btn-info btn-lg" id="createGymUserBtn" style="display: none;">
                        Create Gym Account
                    </button>
                    <div id="workoutInfo" class="mt-4 text-start" style="display: none;">
                        <h5>Your Workouts This Week:</h5>
                        <pre id="workoutData" class="bg-light p-3 rounded border"></pre>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        #messagesList {
            border: 1px solid #ddd;
            border-radius: 4px;
            padding: 10px;
            list-style-type: none;
        }

        .list-group-item {
            margin-bottom: 8px;
            padding: 8px;
            background-color: #f8f9fa;
            border-radius: 4px;
        }
    </style>
}

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script>
        // SignalR Chat Connection
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub", {
                skipNegotiation: true,
                transport: signalR.HttpTransportType.WebSockets
            })
            .configureLogging(signalR.LogLevel.Information)
            .build();

        // Chat Functions
        function setupChat() {
            document.getElementById("messageInput").addEventListener("keydown", function (event) {
                if (event.key === "Enter" && this.value.trim() !== "") {
                    sendMessage();
                }
            });

            connection.on("ReceiveMessage", function (user, message, color) {
                const msg = document.createElement("li");
                msg.className = "list-group-item";
                msg.innerHTML = `<strong style="color:${color}">${user}:</strong> ${message}`;
                const messagesList = document.getElementById("messagesList");
                messagesList.appendChild(msg);
                messagesList.scrollTo({
                    top: messagesList.scrollHeight,
                    behavior: 'smooth'
                });
            });

            async function startConnection() {
                try {
                    await connection.start();
                    console.log("SignalR Connected.");
                } catch (err) {
                    console.error("SignalR Connection Error:", err.toString());
                    setTimeout(startConnection, 5000);
                }
            }

            startConnection();
        }

        async function sendMessage() {
            const messageInput = document.getElementById("messageInput");
            const message = messageInput.value.trim();
            if (!message) return;

            try {
                await connection.invoke("SendMessage", message);
                messageInput.value = "";
                messageInput.focus();
            } catch (err) {
                console.error("Error sending message:", err.toString());
            }
        }

        // Gym API Functions
        async function callApi(endpoint, method = 'GET', body = null) {
            const headers = {
                'Accept': 'application/json',
                'RequestVerificationToken': document.getElementById('__RequestVerificationToken').value
            };

            if (method !== 'GET') {
                headers['Content-Type'] = 'application/json';
            }

            try {
                const response = await fetch(`/api/GymUserApi/${endpoint}`, {
                    method,
                    credentials: 'include',
                    headers,
                    body: body ? JSON.stringify(body) : null
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                return await response.json();
            } catch (error) {
                console.error(`API Error (${endpoint}):`, error);
                throw error;
            }
        }

        async function checkGymUserExists() {
            try {
                const response = await callApi('exists');

                document.getElementById("startWorkoutBtn").style.display = response.exists ? "inline-block" : "none";
                document.getElementById("createGymUserBtn").style.display = response.exists ? "none" : "inline-block";

            } catch (error) {
                alert("Error checking gym user status: " + error.message);
            }
        }

        async function createGymUser() {
            try {
                await callApi('create', 'POST');
                alert("Gym user account created!");
                document.getElementById("startWorkoutBtn").style.display = "inline-block";
                document.getElementById("createGymUserBtn").style.display = "none";
            } catch (error) {
                alert("Error creating gym user: " + error.message);
            }
        }

        async function startWorkout() {
            try {
                await callApi('startWorkout', 'POST');
                alert("Workout started!");
            } catch (error) {
                alert("Error creating gym user: " + error.message);
            }
        }

        // async function getWorkouts() {
        //     try {
        //         const workouts = await callApi('workouts');
        //         document.getElementById("workoutData").textContent = JSON.stringify(workouts, null, 2);
        //         document.getElementById("workoutInfo").style.display = "block";
        //         document.getElementById("startWorkoutBtn").style.display = "none";
        //     } catch (error) {
        //         alert("Error fetching workouts: " + error.message);
        //     }
        // }

        // Initialize
        document.addEventListener("DOMContentLoaded", function () {
            setupChat();
            checkGymUserExists();

            document.getElementById("startWorkoutBtn").addEventListener("click", startWorkout);
            document.getElementById("createGymUserBtn").addEventListener("click", createGymUser);
        });
    </script>
}